import { Button, Popover } from "antd";
import Avatar from "./Avatar";
import { useGetIdentity } from "@refinedev/core";

// importing the user type form grapql schema
/* 
  to use the graphql schema: 
  1. must add the plugin on vite config (vite.config.ts)
  2. must add the schema.types.ts on graphql config (graphql.config.ts)
  3. define the base url and the paths on ts config (tsconfig.ts)
  4. add code gen script on package file (package.json)
  5. create mutations and queries (see graphql folder)
  6. run codegen command to generate all types
*/

// importing the User type form graphql schema
import type { User } from "@/graphql/schema.types";

import { Text } from "../text";
import { SettingOutlined } from "@ant-design/icons";
import { useContext, useState } from "react";
import { AccountSettings } from "./AccountSettings";
import { getThemeMode } from "@/utilities/get-color-mode";

const CurrentUser = () => {
  // User type generated by codegen
  const { data: user } = useGetIdentity<User>();
  const [isOpen, setIsOpen] = useState(false);

  const content = (
    <div style={{ display: "flex", flexDirection: "column" }}>
      <Text strong style={{ padding: "12px 20px" }}>
        {user?.name}
      </Text>
      <div
        style={{
          borderTop: "1px solid #d9d9d9",
          padding: "4px",
          display: "flex",
          flexDirection: "column",
          gap: "4px",
        }}
      >
        <Button
          style={{ textAlign: "center" }}
          icon={<SettingOutlined type="text" />}
          onClick={() => setIsOpen(true)}
        >
          Account Setting
        </Button>
      </div>
    </div>
  );
  return (
    <>
      <Popover
        placement="bottomRight"
        trigger="click"
        overlayInnerStyle={{ padding: 0 }}
        overlayStyle={{ zIndex: 999 }}
        content={content}
      >
        <Avatar
          name={user?.name || ""}
          src={user?.avatarUrl}
          style={{ cursor: "pointer" }}
          size={"default"}
        />
      </Popover>
      {isOpen && (
        <AccountSettings
          setOpened={setIsOpen}
          opened={isOpen}
          userId={user?.id || ""}
        />
      )}
    </>
  );
};

export default CurrentUser;
